#!/bin/bash
# ec2ssh

cache='/tmp/ec2ssh.cache'


check_dependencies () {
    if ! command -v jq > /dev/null ; then
        echo "Please install jq (https://stedolan.github.io/jq/)" ; exit 1
    fi
    if ! command -v fzf > /dev/null ; then
        echo "Please install fzf (https://github.com/junegunn/fzf)" ; exit 1
    fi
    if ! command -v aws > /dev/null ; then echo "Please install aws" ; exit 1 ; fi
}


usage () {
    cat <<.
Usage: $(basename "$0")
    -h, --help      Show this message and exit.
    -e, --env=ENV   Work on this environment (default: prod).
    -f, --flush     Flush cached data.
    -l USER         Login with this username (as in 'ssh -l')

By default this tool connects using 'ssh'. To connect using 'mssh' set this env var:

    EC2_SSH_BINARY=mssh
.
}

die() { echo "$*" >&2; exit 2; }            # complain to STDERR and exit with error
needs_arg() { if [ -z "$OPTARG" ]; then die "No arg for --$OPT option"; fi; }
no_arg() { if [ -n "$OPTARG" ]; then die "No arg allowed for --$OPT option"; fi; }

parse_opts () {
    # Default values.
    env="prod"
    ssh_user=""

    # Parse arguments. Supports long options on Linux and MacOS (without getopt).
    # https://stackoverflow.com/a/28466267
    while getopts u,h,e:,f,l:,-: OPT; do
      if [ "$OPT" = "-" ]; then   # long option: reformulate OPT and OPTARG
        OPT="${OPTARG%%=*}"       # extract long option name
        OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
        OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
      fi
      case "$OPT" in
        u | usage )     usage && exit ;;
        h | help )      usage && exit ;;
        e | env )       needs_arg; env="$OPTARG" ;;
        f | flush )     no_arg; flush_cache && exit ;;
        l )             needs_arg; ssh_user="$OPTARG" ;;
        ??* )           die "Illegal option --$OPT" ;;  # bad long option
        \? )            exit 2 ;;  # bad short option (error reported via getopts)
      esac
    done
    shift $((OPTIND-1)) # remove parsed options and args from $@ list

    # Finish if received some unknown option.
    if [ $# != 0 ] ; then usage && exit 1 ; fi
}


get_ec2roles () {
    # Retrieves all EC2 tags "Role"
    aws ec2 describe-instances --no-paginate --output json \
        --query "Reservations[].Instances" \
        --filters "Name=tag:Env,Values=${env}" "Name=instance-state-name,Values=running" \
    | jq -r '.[][].Tags[] | select(.Key=="Role") | .Value' \
    | sort | uniq
}


flush_cache () {
    rm -f ${cache}/*.roles
}


ec2roles () {
    # create cache dir, if needed.
    [ -d ${cache} ] || mkdir ${cache}

    # Remove empty cache files.
    if [ ! -s "${cache}/${env}.roles" ] ; then
        rm -f "${cache}/${env}.roles"
    fi
    if [ ! -f "${cache}/${env}.roles" ] ; then
        get_ec2roles > "${cache}/${env}.roles"
    fi
    fzf --prompt "Role> " < "${cache}/${env}.roles"
}


ec2instances () {
    aws ec2 describe-instances --no-paginate --output json \
        --filters "Name=tag:Env,Values=${env}" "Name=tag:Role,Values=${role}" \
                  "Name=instance-state-name,Values=running" \
        --query "Reservations[].Instances"
}


jq_name_and_ip () {
    cat <<.
        .[][] |
        # enrich all tags with IP address
        .Tags[] + { "Ip": .PrivateIpAddress, "InstanceId": .InstanceId } |
        # keep only tags with Key="Name"
        select(.Key=="Name") |
        [ .Value, .Ip, .InstanceId ] | @tsv
.
}


check_dependencies

case "${EC2_SSH_BINARY}" in
    "ssh")      ssh_binary=ssh ;;
    "mssh")     ssh_binary=mssh ;;
    *)          ssh_binary=ssh ;;
esac

parse_opts "$@"

role=$(ec2roles)
host_and_addr=$(ec2instances | jq -r -f <(jq_name_and_ip) | fzf -n1 --prompt "Host> ")
private_ip=$(echo "${host_and_addr}" | awk '{print $2}')
instance_id=$(echo "${host_and_addr}" | awk '{print $3}')

image_id=$(
    aws ec2 describe-instances --output json \
    --filters "Name=instance-id,Values=${instance_id}" \
    | jq -r '.Reservations[].Instances[].ImageId')

if [ -z "${ssh_user}" ] ; then
    ami_name=$(aws ec2 describe-images --image-ids "${image_id}" \
        | jq -r '.Images[]? | .Name,.Tags[]?.Value')
    ssh_user=$(
        if echo "${ami_name}" | grep -E -q -i 'ubuntu' ; then
            echo ubuntu
        else
            echo ec2-user
        fi
    )
fi

# Remove the local functions from global env.
unset -f jq_name_and_ip
unset -f ec2instances
unset -f ec2roles
unset -f get_ec2roles


echo "${host_and_addr}"

if [ "${ssh_binary}" = "mssh" ] ; then
    ssh_cmd="mssh -t ${instance_id} ${ssh_user}@${private_ip}"
else
    ssh_cmd="ssh -l ${ssh_user} ${private_ip}"
fi

$ssh_cmd
