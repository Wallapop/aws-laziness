#!/bin/bash
# ecsssh
#
# Given an ECS service, ssh to any EC2 instance running it.

set -e
set -o pipefail


check_dependencies () {
    if ! command -v jq > /dev/null ; then
        echo "Please install jq (https://stedolan.github.io/jq/)" ; exit 1
    fi
    if ! command -v fzf > /dev/null ; then
        echo "Please install fzf (https://github.com/junegunn/fzf)" ; exit 1
    fi
    if ! command -v aws > /dev/null ; then echo "Please install aws" ; exit 1 ; fi
}


usage () {
    cat <<.
Usage: $(basename "$0")
    -h,--help        Show this message and exit.
    --show           Don't ssh to the instance. Just show the IP address.
    -l <login_name>  Pass this option to SSH. Login with this username.
.
}

parse_opts () {
    tempopt=$(getopt --name $(basename "$0") -o u,h,l: -l usage,help,show -- "$@")
    # Finish if received some unknown option.
    if [ $? != 0 ] ; then usage && exit 1 ; fi

    eval set -- "$tempopt"

    # Default values.
    just_show="false"
    ssh_opts=""

    # Parse named options.
    while true ; do
        case "$1" in
            -u|--usage|-h|--help) usage && exit ;;
            --show) just_show="true" ; shift 1 ;;
            -l) ssh_opts="${ssh_opts} -l $2" ; shift 2 ;;
            --) shift 1 ; break ;;
            *) echo "Internal error!" >&2 ; exit 1 ;;
        esac
    done

    # Parse arguments.
    if [ $# != 0 ] ; then usage && exit 1 ; fi
}


check_dependencies
parse_opts "$@"


cluster=$(
    aws ecs list-clusters | jq -r '.clusterArns[]' \
    | fzf -0 --prompt 'cluster> ')

service=$(
    aws ecs list-services --cluster "${cluster}" | jq -r '.serviceArns[]' \
    | cut -d'/' -f2 | fzf -0 --prompt 'service> ')

task_ids=$(aws ecs list-tasks --cluster $cluster --service $service \
    | jq -r '.taskArns[]')

c_instance=$(
    aws ecs describe-tasks --cluster $cluster --tasks $task_ids \
    | jq -r '.tasks[] | [ .lastStatus, .containerInstanceArn ] | @tsv' \
    | fzf -0 --prompt 'task> '\
    | awk '{print $2}')

instance_id=$(
    aws ecs describe-container-instances --cluster "${cluster}" \
    --container-instances "${c_instance}" \
    | jq -r '.containerInstances[].ec2InstanceId')

private_ip=$(
    aws ec2 describe-instances --output json \
    --filters "Name=instance-id,Values=${instance_id}" \
    --query 'Reservations[].Instances[]' \
    | jq -r '.[].PrivateIpAddress')


if [ "${just_show}" = "true" ] ; then
    echo "${private_ip}"
    exit 0
fi

ssh ${ssh_opts} "${private_ip}"
